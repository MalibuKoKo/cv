fullnameOverride: argocd
global:
  logging:
    level: error # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
  securityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
configs:
  secret:
    createSecret: true
  params:
    server.insecure: true
  cm:
    exec.enabled: "true"
    timeout.reconciliation: 180s
    timeout.hard.reconciliation: 300s
    kustomize.buildOptions: --enable-alpha-plugins --enable-helm --load-restrictor LoadRestrictionsNone
    resource.exclusions: |
      ### Network resources created by the Kubernetes control plane and excluded to reduce the number of watched events and UI clutter
      - apiGroups:
        - ''
        - discovery.k8s.io
        kinds:
        - Endpoints
        - EndpointSlice
      ### Internal Kubernetes resources excluded reduce the number of watched events
      - apiGroups:
        - coordination.k8s.io
        kinds:
        - Lease
      ### Internal Kubernetes Authz/Authn resources excluded reduce the number of watched events
      - apiGroups:
        - authentication.k8s.io
        - authorization.k8s.io
        kinds:
        - SelfSubjectReview
        - TokenReview
        - LocalSubjectAccessReview
        - SelfSubjectAccessReview
        - SelfSubjectRulesReview
        - SubjectAccessReview
      ### Intermediate Certificate Request excluded reduce the number of watched events
      - apiGroups:
        - certificates.k8s.io
        kinds:
        - CertificateSigningRequest
      - apiGroups:
        - cert-manager.io
        kinds:
        - CertificateRequest
      ### Cilium internal resources excluded reduce the number of watched events and UI Clutter
      - apiGroups:
        - cilium.io
        kinds:
        - CiliumIdentity
        - CiliumEndpoint
        - CiliumEndpointSlice
      ### Kyverno intermediate and reporting resources excluded reduce the number of watched events and improve performance
      - apiGroups:
        - kyverno.io
        - reports.kyverno.io
        - wgpolicyk8s.io
        kinds:
        - PolicyReport
        - ClusterPolicyReport
        - EphemeralReport
        - ClusterEphemeralReport
        - AdmissionReport
        - ClusterAdmissionReport
        - BackgroundScanReport
        - ClusterBackgroundScanReport
        - UpdateRequest
      ### Crossplane ProviderConfigUsage resource excluded cf. https://docs.crossplane.io/latest/guides/crossplane-with-argo-cd/
      - apiGroups:
        - "*"
        kinds:
        - ProviderConfigUsage  
    resource.customizations.ignoreDifferences.apiextensions.k8s.io_CustomResourceDefinition: |
      jqPathExpressions:
      - '.spec.conversion.webhook.clientConfig.caBundle'
    resource.customizations: |
      "services.k8s.aws/AdoptedResource":
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "ACK.Adopted" and condition.status == "False" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "ACK.Adopted" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Waiting"
          return hs
      "cloudfront.services.k8s.aws/Distribution":
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.status ~= nil then
              if obj.status.conditions ~= nil then
                for i, condition in ipairs(obj.status.conditions) do
                  if condition.type == "ACK.Terminal" and condition.status == "True" then
                    hs.status = "Degraded"
                    hs.message = condition.message
                    return hs
                  end
                  if obj.status.status == "InProgress" then
                    hs.status = "Progressing"
                    hs.message = obj.status.status
                    return hs
                  end
                  if condition.type == "ACK.ResourceSynced" and condition.status == "False" then
                    hs.status = "Progressing"
                    hs.message = condition.message
                    return hs
                  end
                  if condition.type == "ACK.ResourceSynced" and condition.status == "True" then
                    hs.status = "Healthy"
                    hs.message = condition.message
                    return hs
                  end
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Waiting"
          return hs
      "*.services.k8s.aws/*":
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "ACK.Terminal" and condition.status == "True" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "ACK.ResourceSynced" and condition.status == "False" then
                  hs.status = "Progressing"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "ACK.ResourceSynced" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Waiting"
          return hs
      "*.upbound.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "ProviderConfig",
            "ProviderConfigUsage"
          }

          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
            health_status.status = "Healthy"
            health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status
      "*.crossplane.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "Composition",
            "CompositionRevision",
            "DeploymentRuntimeConfig",
            "ControllerConfig",
            "ProviderConfig",
            "ProviderConfigUsage"
          }
          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status
applicationSet:
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
controller:
  env:
    - name: HOME
      value: /tmp/argocd
    - name: ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM
      value: "true"
    - name: ARGOCD_K8S_CLIENT_QPS
      value: "300"
  containerSecurityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
dex:
  containerSecurityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
notifications:
  enabled: false #true
redis:
  containerSecurityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
repoServer:
  clusterRoleRules:
    enabled: true
  # see: https://github.com/argoproj/argo-cd/blob/master/common/common.go
  env:
    - name: ARGOCD_EXEC_TIMEOUT
      value: 3m
  extraArgs:
  - --parallelismlimit
  - "5"
server:
  replicas: 1
  env:
    - name: HOME
      value: /tmp/argocd
  containerSecurityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
  additionalProjects:
  - name: default
    namespace: argocd
    sourceRepos:
    - '*'
    destinations:
    - namespace: '*'
      server: '*'
    clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  - name: apps
    namespace: argocd
    sourceRepos:
    - '*'
    destinations:
    - namespace: '*'
      server: '*'
    clusterResourceWhitelist:
    - group: '*'
      kind: '*'

# -- Array of extra K8s manifests to deploy
## Note: Supports use of custom Helm templates
extraObjects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: public-git-repo-cv
    namespace: argocd
    labels:
      argocd.argoproj.io/secret-type: repository
  stringData:
    type: git
    url: https://github.com/MalibuKoKo/cv.git
- apiVersion: argoproj.io/v1alpha1
  kind: AppProject
  metadata:
    name: apps
    namespace: argocd
  spec:
    clusterResourceWhitelist:
    - group: '*'
      kind: '*'
    destinations:
    - namespace: '*'
      server: '*'
    sourceRepos:
    - '*'

